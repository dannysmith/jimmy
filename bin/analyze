#!/usr/bin/env ruby
# frozen_string_literal: true

require 'English'

class StaticCodeAnalyer
  def run_change_only_tools
    errors = []
    errors << rubocop << reek << compile << markdown
    errors.flatten!
    errors.compact!
    exit if errors.empty?
    abort errors.join("\n\n\n")
  end

  def run_all_checks
    errors = []
    errors << rubocop << reek << markdown << compile << todos << bundler_audit << brakeman
    errors.flatten!
    errors.compact!
    exit if errors.empty?
    abort errors.join("\n\n\n")
  end

  private

  # Run Rubocop against all files ending in .rb that have changed or been added since the last commit.
  def rubocop
    return if changed_ruby_files.empty?

    output = `rubocop --color --display-cop-names --extra-details --display-style-guide #{changed_files.join(' ')}`
    return if $CHILD_STATUS.success?

    heading('Rubocop', output)
  end

  # Run Reek against all files ending in .rb that have changed or been added since the last commit.
  def reek
    return if changed_ruby_files.empty?

    output = `reek --color #{changed_files.join(' ')}`
    return if output&.empty? || output.gsub(/\e\[(\d+)m/, '').match?(/^0 total warnings/)

    heading('Reek', output)
  end

  # Check all files ending in .rb that have changed or been added since the last commit for syntax errors.
  def compile
    return if changed_ruby_files.empty?

    errors = changed_ruby_files.each_with_object([]) do |file, es|
      output = `ruby -cw "#{file}" 2>&1`
      next if output == "Syntax OK\n"

      es << output
    end
    heading('Ruby Warnings', errors.join) unless errors.empty?
  end

  # Run markdown linter against .md files that have changed or been added since the last commit
  def markdown
    return if changed_markdown_files.empty?

    output = `mdl #{changed_markdown_files.join(' ')}`
    return if output&.empty?

    heading('Markdown Linter', output)
  end

  # Check the entire project for TODO and FIXME commenrts
  def todos
    output = `bin/rails notes`
    return if output&.empty?

    heading('TODO\'s', output)
  end

  # Update and run bundler audit
  def bundler_audit
    output = `bundle audit check --update`
    return if output&.empty?

    heading('Bundler Audit', output)
  end

  # Run brakeman against the whole project
  def brakeman
    output = `brakeman -q --color`
    return if output&.empty?

    heading('Brakeman', output)
  end

  def changed_files
    `git status --porcelain`.split(/\n/)
                            .select { |file_name_with_status| file_name_with_status =~ /^ ?[AM].+/ }
                            .map    { |file_name_with_status| file_name_with_status.split(' ')[1] }
  end

  def changed_ruby_files
    changed_files.select { |file_name| File.extname(file_name) == '.rb' }
  end

  def changed_markdown_files
    changed_files.select { |file_name| File.extname(file_name) == '.md' }
  end

  def heading(name, output)
    "\n"\
      "\033[32m" + ('#' * 80) + "\033[0m\n"\
      "\033[32m#####\033[35m#{name.upcase.center(70)}\033[32m#####\033[0m\n"\
      "\033[32m" + ('#' * 80) + "\n\033[0m"\
      "\n" +
      output +
      "\n(Skip these checks with: git commit -n)"
  end
end

class PreCommitHook
  def self.install
    root = `git rev-parse --show-toplevel`.chomp
    abort 'Not in a git repository!' unless $CHILD_STATUS.success?

    path = File.join(root, '.git', 'hooks', 'pre-commit')
    expected = File.absolute_path(__FILE__)
    expected = File.readlink(expected) while File.symlink?(expected)

    begin
      link = File.readlink(path)
      if link != expected
        puts "Path #{path} links to the wrong place. Overwrite it with: \n\n  ln -snfv #{expected} #{path}\n\n"
      else
        puts 'Pre-commit hook already installed'
      end
    rescue Errno::ENOENT
      puts "\nPath #{path} is not a symlink or does not exist. Create it with: \n\n  ln -snfv #{expected} #{path}\n\n"
    end
  end
end

# Command line interface
case ARGV[0]
when 'install' then PreCommitHook.install
when 'all'     then StaticCodeAnalyer.new.run_all_checks
when nil       then StaticCodeAnalyer.new.run_change_only_tools
else                puts "Available commands:\n  $ bin/analyze\n  $ bin/analyze all\n  $ bin/analyze install"
end
